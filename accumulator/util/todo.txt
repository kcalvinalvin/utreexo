ok so the paper's out, but actually, there's lots of modifications to do here before it can be ported over to be used

- forest / pollard

does forest make sense?  Get rid of it?
bad: shuffles can be very i/o heavy.  height adjusts are also i/o heavy, but hardly ever happen.  big shuffles can sometimes happen though.
good: easy to make it disk based rather than ram based.  forest in ram probably doesn't make sense.  not sure.  But much easier to have as a on-disk blob as you just seek to index*32 to get the data you want.

pollard forgetting:

lots of changes here.  Having a uint64 slice for forgets is not the way to do it; then you need to descend for each of them at the end.  There's also the problem of siblings of targets.

There's also a big problem with siblings and remembering.  When you add a leaf, and flag it as "memorable" (because it will be deleted soon), we'll call that a "target".  You have, well, 4 options.  Remember the target, the sibling, both, or none.  None means you have no caching.  Target only actually isn't great because you don't have the sibling.  If it's sibling or both, that works but here's the problem: what do you do with the sibling once the target's gone?  In other words, why did you store that sibling?  Was it just to prove the target?  In that case, the target's gone, and you can forget about the sibling.  But maybe the sibling was there because it, too, will be deleted soon, in which case it should stick around.

So having a memorable flag that persists and moves around with a leaf is a good idea.  Then you know, hey, this thing is memorable; wherever it moves, remember it's sibling.  However, if you have leaves where neither is memorable, you can prune them.

forgetting terms:

n: total leaves (utxos)
m: stored leaves
p: number of leaves to forget this block

Currently time of p * log(n); decend for each.

If you have to go through all the leaves to see which are forgettable, that's no good, because that goes through all existing leaves.  That'd be time of O(m).  


If you make forgettable into a slice of pointers that still doesn't help; you can't go "up" from the pointer.

really we want O(p) forgetting.  I think you can get this; have a slice of pointers, but the pointers are to the parents of the things to forget.  Then the nodes all shuffle around but the pointers don't have to change which is nice.


dirtymap: really there just shouldn't be any maps.  the dirty map can probably be made into a sorted slice.  Maybe can get rid of entirely.
