things to try:

Make moving / swapping nodes happen by changing the pointers of their parents, not by copying values
.. that might help with some of this?  Then if you tag a node as dirty, you don't care where it ends up; you have a pointer
to it and it will be hashed, regardless of where it does.
problem: how to deal with the tops / top slice.  When you swap with a top, there is no parent, so you can't change the 
parent.niece[x] pointer as there isn't one.  So you might have to have exceptions / different code for swapping to / from tops.
Since if you try like &topSlice[h] = n it says "cannot assign to &whatever"

move everything then hash everything.  Then you have "dirt" that is also subject to moves just like swapCollapses.
In fact the output from removeTransform can be all the swaps, and all the dirt post-swap; it does it all for you.
The downside here: you're going to descend each time you want to swap things.  But then you're going to descend again,
to the exact same things you just descended to, in order to hash them after all the swaps are done.  That seems pretty
ugly / lame.  Hmm.
